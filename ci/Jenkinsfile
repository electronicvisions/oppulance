@Library("jenlib") _

List<Map<String, String>> slurmTestResources = [
		["partition": "cube", "wafer": "62", "fpga-without-aout": "0"], // HXv2
		["partition": "cube", "wafer": "62", "fpga-without-aout": "3"]  // HXv3
]
List<String> configureOptions = [
		"",
		"--enable-stack-protector",
		"--enable-stack-redzone",
		"--enable-stack-protector --enable-stack-redzone"
]
List<String> buildProfiles = [
		"",
		"debug",
		"release"
]

timestamps {
	try {
		inSingularity(app: "visionary-dls") {
			withWaf() {
				stage("Toolchain Creation") {
					runOnSlave(label: "frontend") {
						dir("ppu") {
							checkout scm
						}
						wafSetup(projects: ["binutils-gdb@visionary",
						                    "gcc@gcc-8_5-branch-nux",
						                    "newlib@master"],
						         noExtraStage: true)
						jesh "bash gcc/ci/00_download_prerequisites.sh"
					}

					onSlurmResource(partition: "jenkins", "cpus-per-task": "8") {
						jesh "bash binutils-gdb/ci/00_build_install.sh"
						jesh "bash gcc/ci/01_build_install_freestanding.sh"
						jesh "bash newlib/ci/00_build_install.sh"
						jesh "bash ppu/ci/00_build_install_libstdc++.sh"
					}
				}

				Map<String, Closure> parallelBuildProfileVerifications = [:]
				for (String profile : buildProfiles) {
					String profileLocal = profile

					parallelBuildProfileVerifications[(String) "build-profile:${profileLocal}"] = {
						String buildProfileOption = profileLocal.length() ? "--build-profile=${profileLocal}" : ""
						String buildDir = "build-profile_${profileLocal}"

						stage("Toolchain Verification Setup: build-profile=${profileLocal}") {
							runOnSlave(label: "frontend") {
								dir(buildDir) {
									wafSetup(projects: ["libnux"],
									         setupOptions: "--clone-depth=1 " +
									                       "${buildProfileOption}",
									         noExtraStage: true)
								}
							}
						}

						for (String configureOption in configureOptions) {
							String runString = "build-profile: ${profileLocal}, options: ${configureOption}"
							stage("Toolchain Verification: ${runString}") {
								onSlurmResource(partition: "jenkins",
								                "cpus-per-task": "8",
								                time: "04:00:00") {
									dir(buildDir) {
										withEnv(["SINGULARITYENV_PREPEND_PATH+INSTALL=$WORKSPACE/install/bin",
										         "SINGULARITYENV_LD_LIBRARY_PATH+INSTALL=$WORKSPACE/install/lib"]) {
											jesh "waf configure " +
											     "${configureOption} " +
											     "--test-timeout=240 " +
											     "install --test-execnone" +
											     "|& tee ${WORKSPACE}/build_dls_\"${runString}\".log"
										}
									}
								}

								for (testResource in slurmTestResources) {
									onSlurmResource(testResource) {
										// On Gerrit setup, reconfigure the FPGA bitfile
										if (testResource["wafer"] == "62") {
											configureHxCubeBitfile()
										}

										dir(buildDir) {
											withEnv(["SINGULARITYENV_PREPEND_PATH+INSTALL=$WORKSPACE/install/bin",
											         "SINGULARITYENV_LD_LIBRARY_PATH+INSTALL=$WORKSPACE/install/lib"]) {
												jesh "waf install -j1 --test-execall"
											}
										}
									}
									runOnSlave(label: "frontend") {
										dir(buildDir) {
											step([$class       : 'XUnitPublisher',
											      thresholdMode: 1,
											      thresholds   : [[$class           : 'FailedThreshold',
											                       unstableThreshold: '0'],
											      ],
											      tools        : [[$class               : 'GoogleTestType',
											                       deleteOutputFiles    : true,
											                       failIfNotNew         : true,
											                       pattern              : "build/test_results/**/*.xml",
											                       skipNoTestFiles      : false,
											                       stopProcessingIfError: true]
											      ]
											])

											String runId = (testResource.values().join("") +
											                configureOption +
											                profileLocal).replaceAll("\\s", "")
											jesh "mv build/test_results test_results_${runId}"
											archiveArtifacts "test_results_${runId}/**/*"
										}
									}
								}
							}
						}
					}
				}

				parallel(parallelBuildProfileVerifications)
			}

			stage("Evaluate Compiler Warnings") {
				runOnSlave(label: "frontend") {
					recordIssues(qualityGates: [[threshold: 1,
					                             type     : 'TOTAL',
					                             unstable : true]],
					             blameDisabled: true,
					             tools: [gcc(pattern: 'build_dls_*.log')]
					)
				}
			}

			stage("Deployment") {
				if (env.GERRIT_EVENT_TYPE == "change-merged") {
					if (currentBuild.currentResult == "SUCCESS") {
						runOnSlave(label: "frontend") {
							deployModule([name: "ppu-toolchain", source: "install/*"])
						}
					} else {
						echo "Deployment skipped: Unstable build."
					}
				} else {
					echo "Deployment skipped: Build was not triggered by a merge event."
				}
			}
		}
	} catch (Throwable t) {
		notifyFailure(mattermostChannel: "#dls-software")
		throw t
	}

	// Some Jenkins steps fail a build without raising (e.g. archiveArtifacts)
	if (currentBuild.currentResult != "SUCCESS") {
		notifyFailure(mattermostChannel: "#dls-software")
	}
}
